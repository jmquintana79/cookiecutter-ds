# -*- coding: utf-8 -*-
# @Author: Juan Quintana
# @Date:   2025-03-31 15:26:12
# @Last Modified by:   Juan Quintana
# @Last Modified time: 2025-07-17 12:26:15

"""DevOps tasks for pyinvoke."""

# %% IMPORTS

import os
import shutil
from invoke.context import Context
from invoke.tasks import task

# %% TASKS

@task
def formats(ctx: Context) -> None:
    """Format python with ruff"""
    # format imports
    ctx.run("poetry run ruff check --select I --fix")
    # format sources
    ctx.run("poetry run ruff format src/perseo/ tasks/")
    # clean
    ctx.run("ruff clean")


@task
def check_poetry(ctx: Context) -> None:
    """Check pyproject.toml"""
    # poetry
    ctx.run("poetry check --lock", echo=True)


@task
def check_format(ctx: Context) -> None:
    """Check format"""
    # check format with ruff
    ctx.run("ruff format --check src/perseo/ tasks/", echo=True)
    # clean
    ctx.run("ruff clean")


@task
def check_code(ctx: Context) -> None:
    """Check code"""
    # check code with ruff
    ctx.run("ruff check src/perseo/ tasks/", echo=True)
    # clean
    ctx.run("ruff clean")


@task
def check_docs(ctx: Context) -> None:
    """Check docstrings"""
    # check docstring
    ctx.run("interrogate tasks/", echo=True)
    ctx.run("interrogate src/perseo/", echo=True)


@task
def docs(ctx: Context) -> None:
    """Create atomated documentation"""
    ctx.run("pdoc --html --output-dir docs --force src/perseo/")


@task
def clean(c: Context, path: str = ".") -> None:
    """
    Clean files and folders generated by Python: *.pyc y __pycache__.
    """
    # initialize folders to be omited
    exclude_dirs = [".venv", "others"]
    # loop of paths
    for root, dirs, files in os.walk(path):
        # ommit folders
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        # loop of files
        for file in files:
            # remove .pyc files
            if file.endswith(".pyc"):
                try:
                    os.remove(os.path.join(root, file))
                    print(f"Removing: {os.path.join(root, file)}")
                except Exception as e:
                    print(f"[warning]: {str(e)}")
                    print("Continue ...")
        # loop of dirs
        for dir in dirs:
            # remove __pycache__
            if dir == "__pycache__":
                try:
                    shutil.rmtree(os.path.join(root, dir))
                    print(f"Removing: {os.path.join(root, dir)}")
                except Exception as e:
                    print(f"[warning]: {str(e)}")
                    print("Continue ...")

    """Clean the mypy tool"""

    # define folder/file to be removed
    to_be_removed = ".mypy_cache"
    # remove if exists
    if os.path.exists(to_be_removed):
        shutil.rmtree(to_be_removed)

    """Clean the pytest tool."""

    # define folder/file to be removed
    to_be_removed = ".pytest_cache"
    # remove if exists
    if os.path.exists(to_be_removed):
        shutil.rmtree(to_be_removed)

    """ Clean ruff """
    # clean
    c.run("ruff clean")


# %% ALL TASKS

@task(pre=[check_code, formats, check_format, docs, clean], default=True)
def all(_: Context) -> None:
    """Launch all necessary tasks"""

